(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(2),r=(n(0),n(123));const i={id:"communication",title:"Communication",sidebar_label:"Communication"},o={id:"communication",title:"Communication",description:"WatchApp communication methods can be split into two categories:",source:"@site/docs/communication.md",permalink:"/react-native-watch-connectivity/docs/communication",editUrl:"https://github.com/mtford90/react-native-watch-connectivity.github.io/edit/master/docs/communication.md",sidebar_label:"Communication",sidebar:"someSidebar",previous:{title:"FAQ",permalink:"/react-native-watch-connectivity/docs/faq"},next:{title:"Reachability",permalink:"/react-native-watch-connectivity/docs/reachability"}},c=[{value:"Interactive Messaging",id:"interactive-messaging",children:[{value:"Key/Value Pairs",id:"keyvalue-pairs",children:[]},{value:"Raw Data",id:"raw-data",children:[]}]},{value:"Background Transfers",id:"background-transfers",children:[{value:"User Info",id:"user-info",children:[]},{value:"Application Context",id:"application-context",children:[]}]}],s={rightToc:c};function l({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"WatchApp communication methods can be split into two categories:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Interactive messaging",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Messages"),Object(r.b)("li",{parentName:"ul"},"Message data"))),Object(r.b)("li",{parentName:"ul"},"Background transfers",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"User Info"),Object(r.b)("li",{parentName:"ul"},"Application Context")))),Object(r.b)("h2",{id:"interactive-messaging"},"Interactive Messaging"),Object(r.b)("p",null,"Interactive messaging requires both your app & watch extension to be ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reachability"}),"reachable"),"."),Object(r.b)("p",null,"These methods should be used when information is required immediately & both apps are running in the foreground."),Object(r.b)("h3",{id:"keyvalue-pairs"},"Key/Value Pairs"),Object(r.b)("h4",{id:"companion-app"},"Companion App"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import { sendMessage } from "react-native-watch-connectivity";\n\nsendMessage({text: "Hello watch!"}, reply => {\n  console.log(reply); // {"text": "Hello React Native app!"}\n}); \n')),Object(r.b)("h4",{id:"watch-extension"},"Watch Extension"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),'func session(\n  _ session: WCSession,\n  didReceiveMessage message: [String: Any],\n  replyHandler: @escaping ([String: Any]) -> Void\n) {\n  print("watch received message", message);\n  replyHandler(["text": "Hello React Native app!"])\n}\n')),Object(r.b)("h3",{id:"raw-data"},"Raw Data"),Object(r.b)("h4",{id:"companion-app-1"},"Companion App"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import { sendMessageData } from "react-native-watch-connectivity";\n\n// Send raw data\nsendMessageData("SGVsbG8gd2F0Y2g=", reply => {\n  console.log(reply); // SGVsbG8gcmVhY3QgbmF0aXZlIGFwcCE=\n})\n')),Object(r.b)("h4",{id:"watch-extension-1"},"Watch Extension"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),'// Receive raw data\nfunc session(\n    _ session: WCSession,\n    didReceiveMessageData messageData: Data,\n    replyHandler: @escaping (Data) -> Void\n  ) {\n  print("watch received data", data);\n  replyHandler("SGVsbG8gcmVhY3QgbmF0aXZlIGFwcCE=")\n}\n')),Object(r.b)("h2",{id:"background-transfers"},"Background Transfers"),Object(r.b)("p",null,"These methods should be used when information is not required immediately. The OS is responsible for determining when\nthe content is delivered. You do not need both apps to be reachable in order to use these methods."),Object(r.b)("h3",{id:"user-info"},"User Info"),Object(r.b)("p",null,"User info messages are queued & delivered in FIFO order. User info differs from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/communication#application-context"}),"Application Context")," in that nothing\nis overridden. You will need to handle each piece of user info in order."),Object(r.b)("h4",{id:"receive-user-info-from-the-watch"},"Receive user info from the Watch"),Object(r.b)("p",null,"This library implements a queueing system in order to organise each piece of user info received from the watch. This ensures that all user info\nsent from the watch is accessible to the companion React Native app - even if that user info arrives BEFORE a user info\nlistener is registered within react native. (This solves a problem whereby user info could arrive on the native side and\nbe emitted whilst your app is still starting up, for example)"),Object(r.b)("p",null,"A typical workflow looks like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import { \n  dequeueUserInfo, \n  getQueuedUserInfo, \n  subscribeToUserInfo \n} from "react-native-watch-connectivity"\n\nfunction consumeUserInfo(userInfo) {\n  // Do something with the user info\n}\n\ngetQueuedUserInfo().then(queuedUserInfo => {\n  // Consume user info sent by the watch prior to subscribing to new user info\n  queuedUserInfo.forEach(({userInfo, timestamp, id}) => {\n    consumeUserInfo(userInfo);\n    dequeueUserInfo(id); // Mark user info as consumed\n  })\n\n  // Deal with any further user info sent by the watch app\n  subscribeToUserInfo(({userInfo, id}) => {\n    consumeUserInfo(userInfo);\n    dequeueUserInfo(id); // Mark user info as consumed\n  })\n})\n')),Object(r.b)("p",null,"To simplify this workflow, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"consumeUserInfo")," which will dequeue user info automatically."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { consumeUserInfo } from 'react-native-watch-connectivity';\n \nconst unsubscribe = consumeUserInfo(\n  async function(userInfo) {\n      await doSomethingWithTheUserInfo(userInfo)\n      // Will be dequeued automatically, and you'll never see it again\n  }\n)\n")),Object(r.b)("h4",{id:"transfer-user-info-to-the-watch"},"Transfer user info to the watch"),Object(r.b)("p",null,"To send user info to the watch you can use ",Object(r.b)("inlineCode",{parentName:"p"},"transferUserInfo"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transferUserInfo } from 'react-native-watch-connectivity' \n\ntransferUserInfo({key: 'value'})\n")),Object(r.b)("p",null,"To send high priority user info, for example data that should be displayed within a Complication, on the watch face, as\nsoon as possible you can use ",Object(r.b)("inlineCode",{parentName:"p"},"transferCurrentComplicationUserInfo")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { transferCurrentComplicationUserInfo } from 'react-native-watch-connectivity' \n\ntransferCurrentComplicationUserInfo({key: 'value'})\n")),Object(r.b)("h3",{id:"application-context"},"Application Context"),Object(r.b)("p",null,"Application context should be used when only the ",Object(r.b)("em",{parentName:"p"},"latest")," information is required. Once the Watch App or Companion App\nis launched the data will be received."),Object(r.b)("p",null,"Application context differs from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/communication#user-info"}),"User info")," in that the newest Application Context\ndelivery overwrites the last, whereas each User Info message forms a queue."),Object(r.b)("h4",{id:"send-application-context-to-the-watch"},"Send application context to the watch"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { updateApplicationContext } from 'react-native-watch-connectivity' \n\nupdateApplicationContext({key: \"value\"}) \n")),Object(r.b)("h4",{id:"get-the-latest-application-context"},"Get the latest application context"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { getApplicationContext } from 'react-native-watch-connectivity'\n\nconst applicationContext = await getApplicationContext() \n")),Object(r.b)("h4",{id:"subscribe-to-application-context"},"Subscribe to application context"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { subscribeToApplicationContext } from \"react-native-watch-connectivity\";\n\nconst unsubscribe = subscribeToApplicationContext(context => {\n  console.log('context', context)\n})\n")))}l.isMDXComponent=!0},123:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);